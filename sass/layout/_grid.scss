
.row {
  //max-width means if we have a lot of space, it will have the width that we specified.
  // But if the viewport is smaller then it will simply fill 100% of the available space that it has.
  //best width is 1140px we right it with rem
  //we add the values in the variables.sass
  max-width: $grid-width;
  margin: 0 auto;

  //  we want margin-bottom for all of col except the last one
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    //small gutter for small screen
    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }

  @include clearfix;

  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      //in small screen we dont have the coles next to each other.
      @include respond(tab-port) {
        margin-right: 0;
        //the gutter between columns
        margin-bottom: $gutter-vertical-small;
      }

    }

    @include respond(tab-port) {
      //  for small screen we want every col in the one line.
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    //we want to do calculation
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);

  }

  .col-2-of-3 {
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc((2 * ((100% - 3 * #{$gutter-horizontal}) / 4)) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc((3 * ((100% - 3 * #{$gutter-horizontal}) / 4)) + (2 * #{$gutter-horizontal}));
  }
}


